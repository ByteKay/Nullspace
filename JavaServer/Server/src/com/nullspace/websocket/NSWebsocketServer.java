package com.nullspace.websocket;/* * Copyright 2012 The Netty Project * * The Netty Project licenses this file to you under the Apache License, * version 2.0 (the "License"); you may not use this file except in compliance * with the License. You may obtain a copy of the License at: * *   http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the * License for the specific language governing permissions and limitations * under the License. */import java.security.cert.CertificateException;import com.nullspace.server.NSServer;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.Channel;import io.netty.channel.EventLoopGroup;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.nio.NioServerSocketChannel;import io.netty.handler.logging.LogLevel;import io.netty.handler.logging.LoggingHandler;import io.netty.handler.ssl.SslContext;import io.netty.handler.ssl.SslContextBuilder;import io.netty.handler.ssl.util.SelfSignedCertificate;/** * A HTTP server which serves Web Socket requests at: * * http://localhost:8080/websocket * * Open your browser at <a href="http://localhost:8080/">http://localhost:8080/</a>, then the demo page will be loaded * and a Web Socket connection will be made automatically. * * This server illustrates support for the different web socket specification versions and will work with: * * <ul> * <li>Safari 5+ (draft-ietf-hybi-thewebsocketprotocol-00) * <li>Chrome 6-13 (draft-ietf-hybi-thewebsocketprotocol-00) * <li>Chrome 14+ (draft-ietf-hybi-thewebsocketprotocol-10) * <li>Chrome 16+ (RFC 6455 aka draft-ietf-hybi-thewebsocketprotocol-17) * <li>Firefox 7+ (draft-ietf-hybi-thewebsocketprotocol-10) * <li>Firefox 11+ (RFC 6455 aka draft-ietf-hybi-thewebsocketprotocol-17) * </ul> */public final class NSWebsocketServer extends NSServer{	static final boolean SSL = System.getProperty("ssl") != null;	static final int PORT = Integer.parseInt(System.getProperty("port", SSL ? "8443" : "0"));	    public NSWebsocketServer(String ip, int port)     {		super(ip, port);	}    	@Override	protected void Run()	{        // Configure SSL.        SslContext sslCtx = null;        if (SSL)         {        	if (PORT != 0)        	{        		mPort = PORT;        	}            SelfSignedCertificate ssc;			try {				ssc = new SelfSignedCertificate();				sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();			} 			catch (Exception e) 			{				e.printStackTrace();			}        }         else         {            sslCtx = null;        }        EventLoopGroup bossGroup = new NioEventLoopGroup(1);        EventLoopGroup workerGroup = new NioEventLoopGroup();        try         {            ServerBootstrap b = new ServerBootstrap();            b.group(bossGroup, workerGroup)             .channel(NioServerSocketChannel.class)             .handler(new LoggingHandler(LogLevel.INFO))             .childHandler(new NSWebsocketInitializer(sslCtx));            Channel ch = b.bind(mIP, mPort).sync().channel();            ch.closeFuture().sync();        }        catch (Exception e)        {        	        }        finally         {            bossGroup.shutdownGracefully();            workerGroup.shutdownGracefully();        }	}		@Override	public String toString()	{		StringBuilder build = new StringBuilder();		build.append("Websocket Server started ...\n").append(" IP: ").append(mIP).append(" at PORT: ").append(mPort);		build.append("Open your web browser and navigate to " + (SSL ? "https" : "http") + "://" + mIP + ":" + mPort + '/');		return build.toString();	}}